WTH this is:

x1- Make players (game)
x2- Select game (main/game)
x3- Webscrape all info (webscrape)
4- Show users hint info (main/game)
x5- Player bets (game)
x6- Initialize UI (curses)
7- Play out game (curses/game)
x8- Results (game)
x9- Points awarded (main/game)
Loop to 3 until exit signal

Object orientation:
- webscrape info
- player info

Dependencies
- requests
- bs4
- curses

TODO: Remove features=lxml

THE DEVPOST QUESTIONS:
A short written passage about your project, the inspirations for your project, how your project was built, its features, challenges you ran into, and future plans for your project (max of 100 words each). They can also be bullet points.

Our Project: It's a mini sports betting game that takes past games, let's you place bets (essentially just points) on a variety of topics and then animates the game out

Inspirations: We saw the sports theme and talked about animating a sports game. The idea was then brought up (after one of us saw cards or something) to make it an interactive(ish) game with betting, and then NET BET was born

How It Was Built: An excessive amount of pain, a lot of web scraping of https://plaintextsports.com/, a good amount of looking at docs, and, of course, VS Code for python.

Features: It lets you "bet" on all NBA games in the current season (the 2021-2022 season started in October), it supports multiple players, runs on the command line, 

Challenges: The website that we decided to webscrape is written to almost intentionally be hard to web scrape which makes no sense given it's a plain text web site. So the web scraping took forever to work out

Future Plans: Making this work for every sport and making it work on past seasons and possibly future seasons
